version: '3.8'

services:
  # Google Cloud SQL Proxy
  cloud-sql-proxy:
    image: gcr.io/cloudsql-docker/gce-proxy:latest
    restart: always
    command: /cloud_sql_proxy -instances=${DB_CONNECTION_NAME}=tcp:0.0.0.0:5432
    ports:
      - "5432:5432"
    networks:
      - dify-network
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 5432 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Dify API Backend
  api:
    image: langgenius/dify-api:${DIFY_VERSION:-latest}
    restart: always
    environment:
      - MODE=api
      - LOG_LEVEL=INFO
      - DEBUG=false
      - SECRET_KEY=${SECRET_KEY}
      
      # Database Configuration
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=cloud-sql-proxy
      - DB_PORT=5432
      - DB_DATABASE=${DB_DATABASE}
      
      # Redis Configuration
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_DB=${REDIS_DB:-0}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      
      # Celery Configuration
      - CELERY_BROKER_URL=redis://${REDIS_HOST}:${REDIS_PORT:-6379}/${REDIS_DB:-0}
      
      # Storage Configuration
      - STORAGE_TYPE=${STORAGE_TYPE}
      - GOOGLE_STORAGE_BUCKET_NAME=${GOOGLE_STORAGE_BUCKET_NAME}
      
      # Web Configuration
      - WEB_API_CORS_ALLOW_ORIGINS=*
      - CONSOLE_CORS_ALLOW_ORIGINS=*
      - CONSOLE_WEB_URL=http://${INSTANCE_IP}
      - WEB_API_URL=http://${INSTANCE_IP}
      
      # Mail Configuration (optional)
      - MAIL_TYPE=${MAIL_TYPE:-}
      - MAIL_DEFAULT_SEND_FROM=${MAIL_DEFAULT_SEND_FROM:-}
      - SMTP_SERVER=${SMTP_SERVER:-}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME:-}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-}
      - SMTP_USE_TLS=${SMTP_USE_TLS:-true}
      
      # Feature Configuration
      - FEATURE_CONVERSATION_SUMMARY=true
      - FEATURE_DATASET_RETRIEVAL=true
      - FEATURE_TOOLS=true
      
    volumes:
      - ./volumes/app/storage:/app/storage
      - ./volumes/app/logs:/app/logs
    depends_on:
      cloud-sql-proxy:
        condition: service_healthy
    networks:
      - dify-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Dify Worker for background tasks
  worker:
    image: langgenius/dify-api:${DIFY_VERSION:-latest}
    restart: always
    environment:
      - MODE=worker
      - LOG_LEVEL=INFO
      - DEBUG=false
      - SECRET_KEY=${SECRET_KEY}
      
      # Database Configuration
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=cloud-sql-proxy
      - DB_PORT=5432
      - DB_DATABASE=${DB_DATABASE}
      
      # Redis Configuration
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_DB=${REDIS_DB:-0}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      
      # Celery Configuration
      - CELERY_BROKER_URL=redis://${REDIS_HOST}:${REDIS_PORT:-6379}/${REDIS_DB:-0}
      
      # Storage Configuration
      - STORAGE_TYPE=${STORAGE_TYPE}
      - GOOGLE_STORAGE_BUCKET_NAME=${GOOGLE_STORAGE_BUCKET_NAME}
      
    volumes:
      - ./volumes/app/storage:/app/storage
      - ./volumes/app/logs:/app/logs
    depends_on:
      cloud-sql-proxy:
        condition: service_healthy
      api:
        condition: service_healthy
    networks:
      - dify-network

  # Dify Web Frontend
  web:
    image: langgenius/dify-web:${DIFY_VERSION:-latest}
    restart: always
    environment:
      # Use external IP for API access to avoid internal network issues
      - CONSOLE_API_URL=http://${INSTANCE_IP}
      - APP_API_URL=http://${INSTANCE_IP}
      - NEXT_PUBLIC_API_PREFIX=http://${INSTANCE_IP}/console/api
      - NEXT_PUBLIC_PUBLIC_API_PREFIX=http://${INSTANCE_IP}/v1
    networks:
      - dify-network
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./volumes/nginx/logs:/var/log/nginx
      - ./volumes/certbot/conf:/etc/letsencrypt:ro
      - ./volumes/certbot/www:/var/www/certbot:ro
    depends_on:
      web:
        condition: service_healthy
      api:
        condition: service_healthy
    networks:
      - dify-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/health || wget -q --spider http://localhost/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Certbot for SSL certificates (only if domain is set)
  certbot:
    image: certbot/certbot
    restart: "no"
    volumes:
      - ./volumes/certbot/conf:/etc/letsencrypt
      - ./volumes/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - dify-network
    profiles:
      - ssl

networks:
  dify-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  app_storage:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local
  certbot_conf:
    driver: local
  certbot_www:
    driver: local 